[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

var enemy_max = 2

export var stage_scene : PackedScene
var stage : Node2D

var drop = null


func _ready():
	
	# laod stage
	if stage_scene:
		load_stage(stage_scene)
	else:
		load_stage(load(\"res://stages/plain/plain.tscn\"))
	
	for i in get_tree().get_nodes_in_group(\"bells\"):
		i.connect(\"damaged\", self, \"_on_bell_damaged\")

func add_player(controller: PlayerController): # called by a parent
	var node = load(\"res://player/player.tscn\").instance()
	
	node.controller = controller
	
	var position = Vector2() #spawnpoints.pop_front()
	node.position = position
	node.spawn_point = position
	
	add_child(node)
	controller.focus = node

\"\"\"func _on_EnemySpawnTimer_timeout():
	var enemy_count = get_tree().get_nodes_in_group(\"enemies\").size()
	if enemy_count < enemy_max :
		
		var enemy
		
		if enemy_count >= 2 and get_tree().get_nodes_in_group(\"power-ups\").empty() and randf() < 0.25 :
			enemy = get_random_power_up()
		else :
			enemy = preload(\"res://combomancy/entities/enemy.tscn\").instance()
		
		enemy.position = get_random_spawnpoint()
		
		add_child( enemy )\"\"\"

func _on_EnemyIncreaseTimer_timeout():
	enemy_max += 1
	#_on_EnemySpawnTimer_timeout()



func load_stage(packed_scene: PackedScene):
	if stage:
		remove_child(stage)
		stage.queue_free()
	
	stage = packed_scene.instance()
	
	add_child(stage, true)
	


func get_random_spawnpoint() :
	var spawnpoints = stage.get_spawnpoints()
	return spawnpoints[randi() % spawnpoints.size()].position


func get_random_item() -> WeaponResource:
	var pool = []
	
	for id in Globals.weapons:
		var weapon = Globals.get_weapon(id)
		if weapon.level > WeaponResource.Level.UNCATEGORIZED:
			pool.append(weapon)
	
	for id in Globals.items:
		var item = Globals.get_item(id)
		if item.level > WeaponResource.Level.UNCATEGORIZED:
			pool.append(item)
	
	return pool[randi() % pool.size()]

func _on_ItemSpawnTimer_timeout():
	if !drop:
		# select next drop
		drop = get_random_item()
		get_tree().call_group(\"bells\", \"set\", \"score\", 0)
		get_tree().call_group(\"bells\", \"update_score\", drop)
		
	else:
		# drop selected item
		var node
		var bell = get_winning_bell()
		
		if drop.item_scene:
			node = drop.item_scene.instance()
			
		else:
			node = load(\"res://globals/item_container.tscn\").instance()
			node.item = drop
			
		
		node.global_position = (bell.global_position if bell else
			Vector2() # TODO: Spawn random instead
			)
		
		add_child(node)
		
		drop = null
		get_tree().call_group(\"bells\", \"update_score\")
	
	$DropTimer.start(10)

func _on_bell_damaged(attacker, damage, launch):
	if drop and damage:
		$DropTimer.start(max($DropTimer.time_left - float(damage) / 10, 0.1))
		
		var best_score = 0
		var tie = false
		
		for i in get_tree().get_nodes_in_group(\"bells\"):
			if i.score > best_score:
				best_score = i.score
				tie = false
				
			elif i.score == best_score:
				tie = true
				
		
		get_tree().call_group(\"bells\", \"update_score\", drop, best_score, tie)
	

func get_winning_bell() -> Node2D: # returns null if it's a tie
	var best_score = 0
	var bells = [] # more than one if it's a tie
	
	for i in get_tree().get_nodes_in_group(\"bells\"):
		if i.score > best_score:
			bells.clear()
			best_score = i.score
		
		if i.score == best_score:
			bells.append(i)
		
	
	return bells[0] if bells.size() == 1 else null
"

[node name="World" type="Node2D"]
script = SubResource( 1 )

[node name="DropTimer" type="Timer" parent="."]
process_mode = 0
wait_time = 10.0
autostart = true

[node name="EnemySpawnTimer" type="Timer" parent="."]
process_mode = 0
wait_time = 8.0

[node name="EnemyIncreaseTimer" type="Timer" parent="."]
process_mode = 0
wait_time = 40.0
[connection signal="timeout" from="DropTimer" to="." method="_on_ItemSpawnTimer_timeout"]
[connection signal="timeout" from="EnemySpawnTimer" to="." method="_on_EnemySpawnTimer_timeout"]
[connection signal="timeout" from="EnemyIncreaseTimer" to="." method="_on_EnemyIncreaseTimer_timeout"]
