[gd_scene load_steps=22 format=2]

[ext_resource path="res://ui/h_selector.gd" type="Script" id=1]
[ext_resource path="res://player/player.tscn" type="PackedScene" id=2]
[ext_resource path="res://vanilla/stages/sprite_rect.gd" type="Script" id=3]
[ext_resource path="res://ui/controls_preview_ground_2.png" type="Texture" id=4]


[sub_resource type="GDScript" id=1]
script/source = "extends Control

signal player_ready()

var controller : PlayerController


func grab_controller_focus():
	show_main()


func _on_ColorSelection_value_changed(value):
	controller.color = Globals.colors[value]

func _on_Weapon1Selection_value_changed(value):
	var container = $Main/VBox/Weapon1Selection/HBox
	var id = container.get_child(value).get_meta(\"id\")
	controller.match_settings.weapon1 = id



func _on_ReadyButton_pressed():
	emit_signal(\"player_ready\")






func _on_ChangeControls_pressed():
	show_settings()

func _on_Settings_done():
	show_main()


func show_main():
	$Main.show()
	$Settings.hide()
	
	controller.focus = $Main/VBox.get_child(0)

func show_settings():
	$Main.hide()
	$Settings.show()
	
	controller.focus = $Settings/Tree
"

[sub_resource type="StyleBoxFlat" id=2]
content_margin_left = 4.0
content_margin_right = 4.0
content_margin_top = 4.0
content_margin_bottom = 4.0
bg_color = Color( 0.145098, 0.145098, 0.164706, 1 )

[sub_resource type="GDScript" id=3]
script/source = "extends ScrollContainer

onready var controller = get_parent().controller

func _ready():
	controller.connect(\"focus_changed\", self, \"_on_focus_changed\", [], CONNECT_DEFERRED)
	
	# display controls
	$VBox/Controls.text = (
		\"Controls (select to change)\\n\" +
		\"Move: \" + get_directional_input_name(0) + \"\\n\" +
		\"Tilt: \" + get_directional_input_name(1) + \"\\n\" +
		\"Jump/Dodge: \" + controller.list_buttons(\"jump\") + \"\\n\" +
		\"Weapon 1: \" + controller.list_buttons(\"weapon_1\") + \"\\n\" +
		\"Weapon 2: \" + controller.list_buttons(\"weapon_2\") + \"\\n\" +
		#\"Item: \" + controller.list_buttons(\"item\") + \"\\n\" +
		\"Guard [WIP]: \" + controller.list_buttons(\"guard\") + \"\\n\" +
		\"Throw: \" + controller.list_buttons(\"throw\"))
	
	# color selection
	for i in Globals.colors:
		var node = ColorRect.new()
		node.color = i
		node.rect_min_size = Vector2(16, 16)
		$VBox/ColorSelection/HBox.add_child(node)
	
	$VBox/ColorSelection.value = Globals.colors.find(controller.color)
	
	# weapon selection
	var min_level = WeaponResource.Level.FLIMSY
	var max_level = WeaponResource.Level.EFFECTIVE
	
	for i in Globals.weapons:
		var weapon : WeaponResource = Globals.get_weapon(i)
		if weapon.level < min_level or weapon.level > max_level:
			continue
		
		var node = TextureRect.new()
		node.texture = Globals.get_weapon(i).icon
		node.rect_min_size = Vector2(16, 16)
		node.set_meta(\"id\", i)
		$VBox/Weapon1Selection/HBox.add_child(node)
	
	controller.match_settings.weapon1 = \"sword\"

func get_directional_input_name(axis: int) -> String:
	if controller.keyboard:
		return \"%s %s\" % [
		controller.list_buttons(\"left\" if axis == 0 else \"up\"),
		controller.list_buttons(\"right\" if axis == 0 else \"down\")]
	else:
		return controller.get_stick_axis_name(
			controller.stick_settings.stick_x if axis == 0 else
			controller.stick_settings.stick_y)



func _on_focus_changed(new_focus: Control):
	if is_a_parent_of(new_focus):
		set_v_scroll(new_focus.rect_position.y - rect_size.y / 2)
		
"

[sub_resource type="GDScript" id=4]
script/source = "extends VBoxContainer

func _ready():
	
	#for i in get_child_count():
	#	if i != 0:
	#		var path = get_child(i).get_path_to(get_child(i - 1))
	#		get_child(i).focus_neighbour_top = path
	#		
	#	if i != get_child_count() -1:
	#		var path = get_child(i).get_path_to(get_child(i + 1))
	#		get_child(i).focus_neighbour_bottom = path
	
	var nodes = get_children()
	for i in range(-2, get_child_count() - 1):
		
		var path = nodes[i].get_path_to(nodes[i - 1])
		nodes[i].focus_neighbour_top = path
		
		path = nodes[i].get_path_to(nodes[i + 1])
		nodes[i].focus_neighbour_bottom = path
	
"

[sub_resource type="StyleBoxFlat" id=5]
bg_color = Color( 0.145098, 0.145098, 0.164706, 1 )

[sub_resource type="StyleBoxFlat" id=6]
content_margin_left = 2.0
content_margin_right = 2.0
content_margin_top = 2.0
content_margin_bottom = 2.0
bg_color = Color( 0.262745, 0.262745, 0.278431, 1 )

[sub_resource type="StyleBoxFlat" id=7]
draw_center = false
border_width_left = 2
border_width_top = 2
border_width_right = 2
border_width_bottom = 2
border_color = Color( 1, 1, 1, 1 )
expand_margin_left = 2.0
expand_margin_right = 2.0
expand_margin_top = 2.0
expand_margin_bottom = 2.0

[sub_resource type="StyleBoxFlat" id=8]
content_margin_left = 2.0
content_margin_right = 2.0
content_margin_top = 2.0
content_margin_bottom = 2.0
bg_color = Color( 0.262745, 0.262745, 0.278431, 1 )

[sub_resource type="StyleBoxFlat" id=9]
bg_color = Color( 0.6, 0.6, 0.6, 0.501961 )

[sub_resource type="StyleBoxFlat" id=10]
bg_color = Color( 0.6, 0.6, 0.6, 0.25098 )

[sub_resource type="StyleBoxFlat" id=11]
bg_color = Color( 0.145098, 0.145098, 0.164706, 1 )

[sub_resource type="GDScript" id=12]
script/source = "extends Control

var controller

signal done()

func _enter_tree():
	controller = get_parent().controller
	$ViewportContainer/Viewport/Player.controller = controller
	$Tree.connect(\"item_activated\", self, \"_on_item_activated\")
	
	focus_mode = Control.FOCUS_ALL

func _on_item_activated():
	var selected_item = $Tree.get_selected()
	
	if !(selected_item and selected_item.has_meta(\"function\")):
		return
	
	match selected_item.get_meta(\"function\"):
		\"remove\":
			var action = selected_item.get_meta(\"action\")
			var button = selected_item.get_meta(\"button\")
			controller.button_settings[action].erase(button)
			$Tree.list_settings()
			
		\"add\":
			bind_input(selected_item.get_meta(\"action\"))
			$Tree.list_settings()
			
		\"reset\":
			controller.reset_controls_settings()
			$Tree.list_settings()
			
		\"done\":
			emit_signal(\"done\")
	

func bind_input(action):
	$Label.text = (
		\"Press the button you want to bind to %s\" % action.capitalize())
	$Label.show()
	controller.focus = $Label
	
	grab_focus()
	
	while true:
		var input_event : InputEvent = yield(self, \"gui_input\")
		
		print(input_event)
		
		if !input_event.is_pressed() or input_event.is_echo():
			continue
		
		if controller.keyboard and input_event is InputEventKey:
			controller.button_settings[action].append(input_event.scancode)
			accept_event()
			break
		
		if !controller.keyboard and !(input_event is InputEventJoypadButton):
			controller.button_settings[action].append(input_event.button_index)
			accept_event()
			break
		
	
	$Label.hide()
	controller.focus = $Tree
	
	release_focus()
	
	$Tree.list_settings()
	
"

[sub_resource type="StyleBoxFlat" id=13]
bg_color = Color( 0.380392, 0.380392, 0.392157, 1 )

[sub_resource type="GDScript" id=14]
script/source = "extends Tree

func _ready():
	list_settings()

func list_settings():
	var controller = get_parent().controller
	clear()
	
	var root = create_item()
	
	for action in [\"jump\", \"weapon_1\", \"weapon_2\", \"guard\", \"throw\"]:
		var item = create_item(root)
		item.collapsed = true
		
		item.set_text(0, action.capitalize())
		var buttons = \"\"
		
		for button in controller.button_settings[action]:
			var remove = create_item(item)
			var button_name = controller.get_button_name(button)
			buttons += button_name + \"/\"
			
			remove.set_text(0, button_name)
			remove.set_text(1, \"Remove\")
			
			remove.set_meta(\"function\", \"remove\")
			remove.set_meta(\"action\", action)
			remove.set_meta(\"button\", button)
			
		
		buttons = buttons.left(buttons.length() - 1)
		item.set_text(1, buttons)
		
		var add = create_item(item)
		add.set_meta(\"function\", \"add\")
		add.set_meta(\"action\", action)
		add.set_text(1, \"Add\")
	
	var item = create_item(root)
	item.set_text(0, \"Reset to Default\")
	item.set_meta(\"function\", \"reset\")
	item.set_expand_right(0, true)
	item.set_text_align(0, TreeItem.ALIGN_CENTER)
	
	item = create_item(root)
	item.set_text(0, \"Done\")
	item.set_meta(\"function\", \"done\")
	item.set_expand_right(0, true)
	item.set_text_align(0, TreeItem.ALIGN_CENTER)
	
	get_root().get_children().select(1)
	


func _gui_input(event):
	if !event.is_pressed():
		return
	var new_selected_item : TreeItem
	
	if event.is_action(\"ui_accept\"):
		if get_selected().collapsed:
			get_selected().collapsed = false
			new_selected_item = get_selected().get_children()
			
		else:
			emit_signal(\"item_activated\")
			
		
		accept_event()
	
	if event.is_action(\"ui_up\"):
		new_selected_item = get_selected().get_prev()
		if !new_selected_item:
			new_selected_item = get_selected().get_parent()
		
		accept_event()
		
	if event.is_action(\"ui_down\"):
		new_selected_item = get_selected().get_next()
		if !new_selected_item:
			new_selected_item = get_selected().get_parent()
		
		accept_event()
		
	
	if new_selected_item == get_root():
		return
	
	if new_selected_item == get_selected().get_parent():
		new_selected_item.collapsed = true
		ensure_cursor_is_visible()
		
		if event.is_action(\"ui_down\"):
			new_selected_item.get_next().select(0)
		
	elif new_selected_item:
		new_selected_item.select(0)
		ensure_cursor_is_visible()
		
"

[sub_resource type="LineShape2D" id=15]

[sub_resource type="StyleBoxFlat" id=16]
bg_color = Color( 0.145098, 0.145098, 0.164706, 1 )

[sub_resource type="GDScript" id=17]
script/source = "extends Control

onready var controller = get_parent().controller

func _physics_process(_delta):
	if is_visible_in_tree():
		update()

func _draw():
	
	draw_texture(preload(\"res://ui/directional_input.png\"), Vector2(), Color(1, 1, 1, .25))
	
	var src : Rect2
	match controller.get_current_input().direction:
		Vector2(-1, -1): src = Rect2(5, 5, 6, 6)
		Vector2( 0, -1): src = Rect2(12, 0, 8, 8)
		Vector2( 1, -1): src = Rect2(21, 5, 6, 6)
		Vector2(-1,  0): src = Rect2(0, 12, 8, 8)
		Vector2( 0,  0): src = Rect2(12, 12, 8, 8)
		Vector2( 1,  0): src = Rect2(24, 12, 8, 8)
		Vector2(-1,  1): src = Rect2(5, 21, 6, 6)
		Vector2( 0,  1): src = Rect2(12, 24, 8, 8)
		Vector2( 1,  1): src = Rect2(21, 21, 6, 6)
	
	draw_texture_rect_region(preload(\"res://ui/directional_input.png\"), src, src)
	
"

[node name="Control" type="Control"]
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 3
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Main" type="ScrollContainer" parent="."]
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -100.0
margin_top = -240.0
margin_right = 100.0
custom_styles/bg = SubResource( 2 )
scroll_horizontal_enabled = false
script = SubResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBox" type="VBoxContainer" parent="Main"]
margin_left = 4.0
margin_top = 4.0
margin_right = 196.0
margin_bottom = 155.0
size_flags_horizontal = 3
custom_constants/separation = 2
script = SubResource( 4 )

[node name="MenuControls" type="Label" parent="Main/VBox"]
margin_right = 192.0
margin_bottom = 31.0
custom_styles/normal = SubResource( 5 )
text = "Navigate the menus with Arrow keys and Enter"
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorSelection" type="Control" parent="Main/VBox"]
margin_top = 33.0
margin_right = 192.0
margin_bottom = 57.0
rect_min_size = Vector2( 0, 24 )
script = ExtResource( 1 )
wrap_around = true
display_text = 0
container = NodePath("HBox")
bg_stylebox = SubResource( 6 )
selected_stylebox = SubResource( 7 )

[node name="HBox" type="HBoxContainer" parent="Main/VBox/ColorSelection"]
anchor_right = 1.0
margin_left = 4.0
margin_top = 4.0
margin_right = -4.0
margin_bottom = 20.0
custom_constants/separation = 4
alignment = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Controls" type="Label" parent="Main/VBox"]
margin_top = 59.0
margin_right = 192.0
margin_bottom = 77.0
custom_styles/normal = SubResource( 8 )

[node name="ChangeControls" type="Button" parent="Main/VBox"]
margin_top = 79.0
margin_right = 192.0
margin_bottom = 93.0
custom_styles/pressed = SubResource( 9 )
custom_styles/normal = SubResource( 10 )
text = "Change Controls"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Weapon1Selection" type="Control" parent="Main/VBox"]
margin_top = 95.0
margin_right = 192.0
margin_bottom = 135.0
rect_min_size = Vector2( 0, 40 )
focus_neighbour_top = NodePath("../ReadyButton")
script = ExtResource( 1 )
wrap_around = true
display_text = 2
text_valign = 2
container = NodePath("HBox")
label = NodePath("Label")
bg_stylebox = SubResource( 6 )
selected_stylebox = SubResource( 7 )

[node name="HBox" type="HBoxContainer" parent="Main/VBox/Weapon1Selection"]
anchor_right = 1.0
margin_left = 4.0
margin_top = 4.0
margin_right = -4.0
margin_bottom = 20.0
custom_constants/separation = 4
alignment = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="Main/VBox/Weapon1Selection"]
visible = false
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = -14.0
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
custom_constants/shadow_as_outline = 1
text = "Weapon"
align = 1
clip_text = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ReadyButton" type="Button" parent="Main/VBox"]
margin_top = 137.0
margin_right = 192.0
margin_bottom = 151.0
focus_mode = 0
custom_styles/pressed = SubResource( 9 )
custom_styles/normal = SubResource( 10 )
text = "Ready"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Settings" type="Panel" parent="."]
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -140.0
margin_top = -240.0
margin_right = 140.0
custom_styles/panel = SubResource( 11 )
script = SubResource( 12 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Tree" type="Tree" parent="Settings"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 4.0
margin_right = -96.0
margin_bottom = -4.0
focus_neighbour_bottom = NodePath("../Confirm")
size_flags_horizontal = 3
size_flags_vertical = 3
custom_styles/selected = SubResource( 13 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
columns = 2
hide_folding = true
hide_root = true
select_mode = 1
script = SubResource( 14 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ViewportContainer" type="ViewportContainer" parent="Settings"]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -92.0
margin_top = 4.0
margin_right = -4.0
margin_bottom = 118.0
stretch = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Viewport" type="Viewport" parent="Settings/ViewportContainer"]
size = Vector2( 88, 114 )
own_world = true
handle_input_locally = false
render_target_update_mode = 3

[node name="Player" parent="Settings/ViewportContainer/Viewport" instance=ExtResource( 2 )]

[node name="Camera2D" type="Camera2D" parent="Settings/ViewportContainer/Viewport/Player"]
current = true

[node name="StaticBody2D" type="StaticBody2D" parent="Settings/ViewportContainer/Viewport"]
position = Vector2( 0, 64 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="Settings/ViewportContainer/Viewport/StaticBody2D"]
shape = SubResource( 15 )

[node name="SpriteRect" type="Node2D" parent="Settings/ViewportContainer/Viewport/StaticBody2D"]
scale = Vector2( 2, 2 )
script = ExtResource( 3 )
texture = ExtResource( 4 )
rect = Rect2( -1024, 0, 2048, 32 )

[node name="Label" type="Label" parent="Settings"]
visible = false
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -60.0
margin_top = -60.0
margin_right = 60.0
margin_bottom = 60.0
custom_styles/normal = SubResource( 16 )
text = "Press the button you want to bind to "
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="DirectionalInput" type="Control" parent="Settings"]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -92.0
margin_top = 122.0
margin_right = -60.0
margin_bottom = 154.0
script = SubResource( 17 )
[connection signal="value_changed" from="Main/VBox/ColorSelection" to="." method="_on_ColorSelection_value_changed"]
[connection signal="pressed" from="Main/VBox/ChangeControls" to="." method="_on_ChangeControls_pressed"]
[connection signal="value_changed" from="Main/VBox/Weapon1Selection" to="." method="_on_Weapon1Selection_value_changed"]
[connection signal="pressed" from="Main/VBox/ReadyButton" to="." method="_on_ReadyButton_pressed"]
[connection signal="done" from="Settings" to="." method="_on_Settings_done"]
